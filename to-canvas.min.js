(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports = function getDepth(arr) {
  const isArray = (arr) =>
    Array.isArray(arr) ||
    arr instanceof Int8Array ||
    arr instanceof Uint8Array ||
    arr instanceof Uint8ClampedArray ||
    arr instanceof Int16Array ||
    arr instanceof Uint16Array ||
    arr instanceof Int32Array ||
    arr instanceof Uint32Array ||
    arr instanceof Float32Array ||
    arr instanceof Float64Array ||
    arr instanceof BigInt64Array ||
    arr instanceof BigUint64Array;

  let depth = 0;
  let part = arr;
  while (isArray(part)) {
    depth++;
    part = part[0];
  }
  return depth;
};

},{}],2:[function(require,module,exports){
const getDepth = require("get-depth");

module.exports = function guessImageLayout({ bands, data, height, width }) {
  const depth = getDepth(data);
  if (depth === 1) {
    // guess interleaved rgba ImageData.data
    return {
      layout: "[row,column,band]",
      bands: bands ? bands : height && width ? data.length / (height * width) : undefined,
      height: height ? height : bands && width ? data.length / (bands * width) : undefined,
      width: width ? width : bands && height ? data.length / (bands * height) : undefined
    };
  } else if (depth === 2) {
    if (height && width) {
      if (data[0].length === height * width) {
        return { layout: "[band][row,column]", bands: data.length, height, width };
      } else if (data.length === height * width) {
        return { layout: "[row,column][band]", bands: data[0].length, height, width };
      }
    } else {
      // assume have more grid cells than bands
      if (data.length < data[0].length) {
        return {
          bands: data.length,
          layout: "[band][row,column]",
          height: height ? height : width ? data[0].length / width : undefined,
          width: width ? width : height ? data[0].length / height : undefined
        };
      } else {
        return {
          bands: data[0].length,
          layout: "[row,column][band]",
          height: height ? height : width ? data.length / width : undefined,
          width: width ? width : height ? data.length / height : undefined
        };
      }
    }
  } else if (depth === 3) {
    const len1 = data.length;
    const len2 = data[0].length;
    const len3 = data[0][0].length;
    if (height && width) {
      if (len1 === height && len2 === width) {
        return { layout: "[row][column][band]", bands: len3, height, width };
      } else if (len2 === height && len3 === width) {
        return { layout: "[band][row][column]", bands: len1, height, width };
      }
    } else {
      // assume band count is smaller than height and width
      if (len1 < len2 && len1 < len3) {
        return { layout: "[band][row][column]", bands: len1, height: len2, width: len3 };
      } else if (len3 < len1 && len3 < len2) {
        return { layout: "[row][column][band]", bands: len3, height: len1, width: len2 };
      }
    }
  }
};

},{"get-depth":1}],3:[function(require,module,exports){
function addSymbolIterator(obj) {
  try {
    obj[Symbol.iterator] = function () {
      return this;
    };
  } catch (error) {
    // pass
  }
}

function addSymbolIteratorFallback(obj) {
  obj["@@iterator"] = function () {
    return this;
  };
}

function wrapNextFunction(next) {
  const iter = { next };
  addSymbolIterator(iter);
  addSymbolIteratorFallback(iter);
  return iter;
}

function isArray(data) {
  try {
    return data.constructor.name.endsWith("Array");
  } catch {
    return false;
  }
}

function hasNext(data) {
  try {
    return typeof data.next === "function";
  } catch {
    return false;
  }
}

function hasIterator(data) {
  try {
    return "@@iterator" in data;
  } catch {
    return false;
  }
}

function hasSymbolIterator(data) {
  try {
    return Symbol.iterator in data.constructor.prototype;
  } catch {
    return false;
  }
}

function isIterator(data) {
  try {
    return (
      Symbol.iterator in data &&
      typeof data.next === "function" &&
      data.propertyIsEnumerable("next") === false
    );
  } catch {
    return false;
  }
}

function getIterator(data) {
  const iter = data["@@iterator"];
  if (hasNext(iter)) {
    return iter;
  } else if (typeof iter === "function") {
    return iter();
  }
}

function createIterator(data) {
  let i = 0;
  let len = data.length;
  const next = () =>
    i++ < len ? { value: data[i], done: false } : { done: true };
  return wrapNextFunction(next);
}

function getOrCreateIterator(data) {
  if (isIterator(data)) {
    return data;
  } else if (hasSymbolIterator(data)) {
    return data[Symbol.iterator]();
  } else if (hasNext(data)) {
    return wrapNextFunction(data.next);
  } else if (hasIterator(data)) {
    return getIterator(data);
  } else if (typeof data === "string" || isArray(data)) {
    return createIterator(data);
  } else {
    throw "[iter-fun] unable to determine iterator";
  }
}

function zip(iters) {
  // convert input to iters just in case
  iters = iters.map(getOrCreateIterator);

  return wrapNextFunction(function next() {
    const values = iters.map(iter => iter.next());
    // if they are all done, stop
    if (values.every(({ done }) => done)) {
      return { done: true };
    } else {
      return {
        done: false,
        value: values.map(({ value }) => value)
      };
    }
  });
}

if (typeof module === "object") {
  module.exports = {
    addSymbolIterator,
    addSymbolIteratorFallback,
    isIterator,
    isArray,
    hasNext,
    hasSymbolIterator,
    hasIterator,
    getIterator,
    createIterator,
    getOrCreateIterator,
    wrapNextFunction,
    zip
  };
}

},{}],4:[function(require,module,exports){
const guessImageLayout = require("guess-image-layout");
const xdim = require("xdim");

module.exports = function toImageData(input, meta = {}) {
  let height, width, data, bands, in_layout;

  if (input.data) data = input.data;
  else if (input.pixels) data = input.pixels;
  else data = input;

  if (input.height) height = input.height;
  else if (data.height) height = data.height;
  else if (meta.height) height = meta.height;

  if (input.width) width = input.width;
  else if (data.width) width = data.width;
  else if (meta.width) width = meta.width;

  if (input.layout) in_layout = input.layout;
  else if (meta.layout) in_layout = meta.layout;

  const guessed = guessImageLayout({ data, height, width });
  if (!bands) bands = guessed.bands;
  if (!height) height = guessed.height;
  if (!width) width = guessed.width;
  if (!in_layout) in_layout = guessed.layout;

  if (!height + !width + !bands >= 2) {
    throw new Error(
      "[to-image-data] unable to determine image layout without more information. please pass in an object with a height and/or width property"
    );
  }

  const arr = new Uint8ClampedArray(4 * height * width).fill(255);

  const select = xdim.prepareSelect({
    data,
    layout: in_layout,
    sizes: { band: bands, row: height, column: width }
  });

  const update = xdim.prepareUpdate({
    data: arr,
    layout: "[row,column,band]",
    sizes: { band: 4, row: height, column: width }
  });

  for (let b = 0; b < bands; b++) {
    for (let r = 0; r < height; r++) {
      for (let c = 0; c < width; c++) {
        const point = { band: b, row: r, column: c };
        const { value } = select({ point });
        update({ point, value });
      }
    }
  }

  let result;
  if (typeof ImageData !== "undefined") {
    try {
      result = new ImageData(arr, width, height);
    } catch (error) {
      // pass
    }
  }

  if (!result) {
    // above failed for whatever reason
    // so return an ImageData-like object
    result = { data: arr, width, height };
  }

  return result;
};

},{"guess-image-layout":2,"xdim":7}],5:[function(require,module,exports){
module.exports = {
  "1": function ({ point }) { const parent = this.data; const index = point[this.d0v0]; return { parent, index, value: parent[index] }; },
  "2": function ({ point }) { const parent = this.data; const index = this.m0v0*point[this.d0v0]+this.m0v1*point[this.d0v1]; return { parent, index, value: parent[index] }; },
  "3": function ({ point }) { const parent = this.data; const index = this.m0v0*point[this.d0v0]+this.m0v1*point[this.d0v1]+this.m0v2*point[this.d0v2]; return { parent, index, value: parent[index] }; },
  "4": function ({ point }) { const parent = this.data; const index = this.m0v0*point[this.d0v0]+this.m0v1*point[this.d0v1]+this.m0v2*point[this.d0v2]+this.m0v3*point[this.d0v3]; return { parent, index, value: parent[index] }; },
  "5": function ({ point }) { const parent = this.data; const index = this.m0v0*point[this.d0v0]+this.m0v1*point[this.d0v1]+this.m0v2*point[this.d0v2]+this.m0v3*point[this.d0v3]+this.m0v4*point[this.d0v4]; return { parent, index, value: parent[index] }; },
  "1,1": function ({ point }) { const parent = this.data[point[this.d0v0]]; const index = point[this.d1v0]; return { parent, index, value: parent[index] }; },
  "1,2": function ({ point }) { const parent = this.data[point[this.d0v0]]; const index = this.m1v0*point[this.d1v0]+this.m1v1*point[this.d1v1]; return { parent, index, value: parent[index] }; },
  "1,3": function ({ point }) { const parent = this.data[point[this.d0v0]]; const index = this.m1v0*point[this.d1v0]+this.m1v1*point[this.d1v1]+this.m1v2*point[this.d1v2]; return { parent, index, value: parent[index] }; },
  "1,4": function ({ point }) { const parent = this.data[point[this.d0v0]]; const index = this.m1v0*point[this.d1v0]+this.m1v1*point[this.d1v1]+this.m1v2*point[this.d1v2]+this.m1v3*point[this.d1v3]; return { parent, index, value: parent[index] }; },
  "1,5": function ({ point }) { const parent = this.data[point[this.d0v0]]; const index = this.m1v0*point[this.d1v0]+this.m1v1*point[this.d1v1]+this.m1v2*point[this.d1v2]+this.m1v3*point[this.d1v3]+this.m1v4*point[this.d1v4]; return { parent, index, value: parent[index] }; },
  "1,1,1": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]]; const index = point[this.d2v0]; return { parent, index, value: parent[index] }; },
  "1,1,2": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]]; const index = this.m2v0*point[this.d2v0]+this.m2v1*point[this.d2v1]; return { parent, index, value: parent[index] }; },
  "1,1,3": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]]; const index = this.m2v0*point[this.d2v0]+this.m2v1*point[this.d2v1]+this.m2v2*point[this.d2v2]; return { parent, index, value: parent[index] }; },
  "1,1,4": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]]; const index = this.m2v0*point[this.d2v0]+this.m2v1*point[this.d2v1]+this.m2v2*point[this.d2v2]+this.m2v3*point[this.d2v3]; return { parent, index, value: parent[index] }; },
  "1,1,5": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]]; const index = this.m2v0*point[this.d2v0]+this.m2v1*point[this.d2v1]+this.m2v2*point[this.d2v2]+this.m2v3*point[this.d2v3]+this.m2v4*point[this.d2v4]; return { parent, index, value: parent[index] }; },
  "1,1,1,1": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]]; const index = point[this.d3v0]; return { parent, index, value: parent[index] }; },
  "1,1,1,2": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]]; const index = this.m3v0*point[this.d3v0]+this.m3v1*point[this.d3v1]; return { parent, index, value: parent[index] }; },
  "1,1,1,3": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]]; const index = this.m3v0*point[this.d3v0]+this.m3v1*point[this.d3v1]+this.m3v2*point[this.d3v2]; return { parent, index, value: parent[index] }; },
  "1,1,1,4": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]]; const index = this.m3v0*point[this.d3v0]+this.m3v1*point[this.d3v1]+this.m3v2*point[this.d3v2]+this.m3v3*point[this.d3v3]; return { parent, index, value: parent[index] }; },
  "1,1,1,5": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]]; const index = this.m3v0*point[this.d3v0]+this.m3v1*point[this.d3v1]+this.m3v2*point[this.d3v2]+this.m3v3*point[this.d3v3]+this.m3v4*point[this.d3v4]; return { parent, index, value: parent[index] }; },
  "1,1,1,1,1": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][point[this.d3v0]]; const index = point[this.d4v0]; return { parent, index, value: parent[index] }; },
  "1,1,1,1,2": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][point[this.d3v0]]; const index = this.m4v0*point[this.d4v0]+this.m4v1*point[this.d4v1]; return { parent, index, value: parent[index] }; },
  "1,1,1,1,3": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][point[this.d3v0]]; const index = this.m4v0*point[this.d4v0]+this.m4v1*point[this.d4v1]+this.m4v2*point[this.d4v2]; return { parent, index, value: parent[index] }; },
  "1,1,1,1,4": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][point[this.d3v0]]; const index = this.m4v0*point[this.d4v0]+this.m4v1*point[this.d4v1]+this.m4v2*point[this.d4v2]+this.m4v3*point[this.d4v3]; return { parent, index, value: parent[index] }; },
  "1,1,1,1,5": function ({ point }) { const parent = this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][point[this.d3v0]]; const index = this.m4v0*point[this.d4v0]+this.m4v1*point[this.d4v1]+this.m4v2*point[this.d4v2]+this.m4v3*point[this.d4v3]+this.m4v4*point[this.d4v4]; return { parent, index, value: parent[index] }; }
}
},{}],6:[function(require,module,exports){
module.exports = {
  "1": function ({ point, value }) { this.data[point[this.d0v0]] = value; },
  "2": function ({ point, value }) { this.data[this.m0v0*point[this.d0v0]+this.m0v1*point[this.d0v1]] = value; },
  "3": function ({ point, value }) { this.data[this.m0v0*point[this.d0v0]+this.m0v1*point[this.d0v1]+this.m0v2*point[this.d0v2]] = value; },
  "4": function ({ point, value }) { this.data[this.m0v0*point[this.d0v0]+this.m0v1*point[this.d0v1]+this.m0v2*point[this.d0v2]+this.m0v3*point[this.d0v3]] = value; },
  "5": function ({ point, value }) { this.data[this.m0v0*point[this.d0v0]+this.m0v1*point[this.d0v1]+this.m0v2*point[this.d0v2]+this.m0v3*point[this.d0v3]+this.m0v4*point[this.d0v4]] = value; },
  "1,1": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]] = value; },
  "1,2": function ({ point, value }) { this.data[point[this.d0v0]][this.m1v0*point[this.d1v0]+this.m1v1*point[this.d1v1]] = value; },
  "1,3": function ({ point, value }) { this.data[point[this.d0v0]][this.m1v0*point[this.d1v0]+this.m1v1*point[this.d1v1]+this.m1v2*point[this.d1v2]] = value; },
  "1,4": function ({ point, value }) { this.data[point[this.d0v0]][this.m1v0*point[this.d1v0]+this.m1v1*point[this.d1v1]+this.m1v2*point[this.d1v2]+this.m1v3*point[this.d1v3]] = value; },
  "1,5": function ({ point, value }) { this.data[point[this.d0v0]][this.m1v0*point[this.d1v0]+this.m1v1*point[this.d1v1]+this.m1v2*point[this.d1v2]+this.m1v3*point[this.d1v3]+this.m1v4*point[this.d1v4]] = value; },
  "1,1,1": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]] = value; },
  "1,1,2": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][this.m2v0*point[this.d2v0]+this.m2v1*point[this.d2v1]] = value; },
  "1,1,3": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][this.m2v0*point[this.d2v0]+this.m2v1*point[this.d2v1]+this.m2v2*point[this.d2v2]] = value; },
  "1,1,4": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][this.m2v0*point[this.d2v0]+this.m2v1*point[this.d2v1]+this.m2v2*point[this.d2v2]+this.m2v3*point[this.d2v3]] = value; },
  "1,1,5": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][this.m2v0*point[this.d2v0]+this.m2v1*point[this.d2v1]+this.m2v2*point[this.d2v2]+this.m2v3*point[this.d2v3]+this.m2v4*point[this.d2v4]] = value; },
  "1,1,1,1": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][point[this.d3v0]] = value; },
  "1,1,1,2": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][this.m3v0*point[this.d3v0]+this.m3v1*point[this.d3v1]] = value; },
  "1,1,1,3": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][this.m3v0*point[this.d3v0]+this.m3v1*point[this.d3v1]+this.m3v2*point[this.d3v2]] = value; },
  "1,1,1,4": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][this.m3v0*point[this.d3v0]+this.m3v1*point[this.d3v1]+this.m3v2*point[this.d3v2]+this.m3v3*point[this.d3v3]] = value; },
  "1,1,1,5": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][this.m3v0*point[this.d3v0]+this.m3v1*point[this.d3v1]+this.m3v2*point[this.d3v2]+this.m3v3*point[this.d3v3]+this.m3v4*point[this.d3v4]] = value; },
  "1,1,1,1,1": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][point[this.d3v0]][point[this.d4v0]] = value; },
  "1,1,1,1,2": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][point[this.d3v0]][this.m4v0*point[this.d4v0]+this.m4v1*point[this.d4v1]] = value; },
  "1,1,1,1,3": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][point[this.d3v0]][this.m4v0*point[this.d4v0]+this.m4v1*point[this.d4v1]+this.m4v2*point[this.d4v2]] = value; },
  "1,1,1,1,4": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][point[this.d3v0]][this.m4v0*point[this.d4v0]+this.m4v1*point[this.d4v1]+this.m4v2*point[this.d4v2]+this.m4v3*point[this.d4v3]] = value; },
  "1,1,1,1,5": function ({ point, value }) { this.data[point[this.d0v0]][point[this.d1v0]][point[this.d2v0]][point[this.d3v0]][this.m4v0*point[this.d4v0]+this.m4v1*point[this.d4v1]+this.m4v2*point[this.d4v2]+this.m4v3*point[this.d4v3]+this.m4v4*point[this.d4v4]] = value; }
}
},{}],7:[function(require,module,exports){
const layoutCache = {};
const { wrapNextFunction } = require("iter-fun");
const preparedSelectFunctions = require("./prepared-select-funcs.js");
const preparedUpdateFunctions = require("./prepared-update-funcs.js");

function parseDimensions(str) {
  const dims = {};
  const re = /[A-Za-z]+/g;
  let arr;
  while ((arr = re.exec(str)) !== null) {
    const [match] = arr;
    dims[match] = {
      name: match
    };
  }
  return dims;
}

function normalizeLayoutString(str) {
  const alphabet = "abcdefghijklmnopqrstuvwxyz";
  let i = 0;
  return str.replace(/[A-Za-z]+/g, () => alphabet[i++]);
}

const parseVectors = str => str.match(/\[[^\]]+\]/g);

// "[row]" to "row"
const removeBraces = str => (str.startsWith("[") && str.endsWith("]") ? str.substring(1, str.length - 1) : str);

// "(row)" to "row"
const removeParentheses = str => (str.startsWith("(") && str.endsWith(")") ? str.substring(1, str.length - 1) : str);

// sort of like parsing a CSV except instead of " for quotes use (
const matchSequences = str => str.match(/(\(.*?\)|[^\(,\s]+)(?=\s*,|\s*$)/g);

const parseSequences = str => {
  // unwrap [...]
  str = removeBraces(str);

  // unwrap (...)
  str = removeParentheses(str);

  const seqs = matchSequences(str);

  if (seqs.length === 1) {
    return {
      type: "Vector",
      dim: seqs[0]
    };
  } else {
    return {
      type: "Matrix",
      parts: seqs.map(parseSequences)
    };
  }
};

function checkValidity(str) {
  const invalid = str.match(/[^ A-Za-z,\[\]]/g);
  if (invalid) {
    throw new Error("The following invalid characters were used: " + invalid.map(c => `"${c}"`).join(", "));
  } else {
    return true;
  }
}

function parse(str, { useLayoutCache = true } = { useLayoutCache: true }) {
  if (useLayoutCache && str in layoutCache) return layoutCache[str];

  checkValidity(str);

  const vectors = parseVectors(str);
  const dims = vectors.map(parseSequences);
  const result = {
    type: "Layout",
    summary: dims.map(it => (it.type === "Matrix" ? it.parts.length : 1)),
    dims
  };

  if (useLayoutCache) layoutCache[str] = result;

  return result;
}

function update({ useLayoutCache = true, data, layout, point, sizes = {}, value }) {
  if (typeof layout === "string") layout = parse(layout, { useLayoutCache });

  const { dims } = layout;
  for (let idim = 0; idim < dims.length; idim++) {
    const last = idim === dims.length - 1;
    const arr = dims[idim];
    let offset;
    if (arr.type === "Vector") {
      offset = point[arr.dim];
    } else {
      // arr.type assumed to be "Matrix"
      const { parts } = arr;
      offset = 0;
      let multiplier = 1;
      for (let i = parts.length - 1; i >= 0; i--) {
        const part = parts[i];
        const { dim } = part;
        offset += multiplier * point[dim];
        if (i > 0) {
          if (!(dim in sizes)) throw new Error(`you cannot calculate the location without knowing the size of the "${dim}" dimension.`);
          multiplier *= sizes[dim];
        }
      }
    }
    if (last) {
      data[offset] = value;
    } else {
      data = data[offset];
    }
  }
}

function prepareUpdate({ useLayoutCache = true, data, layout, sizes = {} }) {
  if (typeof layout === "string") {
    layout = parse(layout, { useLayoutCache });
  }
  const { dims } = layout;
  const numDims = dims.length;
  const multipliers = getMultipliers({ useLayoutCache, layout, sizes });
  const end = numDims - 1;

  const key = layout.summary.toString();
  if (key in preparedUpdateFunctions) {
    const _this = { data };
    layout.dims.map((it, depth) => {
      if (it.type === "Vector") {
        _this[`d${depth}v0`] = it.dim;
      } else if (it.type === "Matrix") {
        it.parts.forEach((part, ipart) => {
          _this[`d${depth}v${ipart}`] = part.dim;
          _this[`m${depth}v${ipart}`] = multipliers[part.dim];
        });
      }
    });

    return preparedUpdateFunctions[key].bind(_this);
  }

  return ({ point, value }) => {
    let currentData = data;
    for (let idim = 0; idim < numDims; idim++) {
      const last = idim === end;
      const arr = dims[idim];
      let offset;
      if (arr.type === "Vector") {
        offset = point[arr.dim];
      } else {
        // arr.type assumed to be "Matrix"
        offset = arr.parts.reduce((acc, { dim }) => acc + multipliers[dim] * point[dim], 0);
      }
      if (last) {
        currentData[offset] = value;
      } else {
        currentData = currentData[offset];
      }
    }
  };
}

function iterClip({ data, layout, order, rect = {}, sizes = {}, useLayoutCache = true }) {
  if (!data) throw new Error("[xdim] must specify data");
  if (!layout) throw new Error("[xdim] must specify layout");
  const points = iterPoints({ order, sizes, rect });
  return wrapNextFunction(function next() {
    const { value: point, done } = points.next();
    if (done) {
      return { done: true };
    } else {
      const { value } = select({ data, layout, point, sizes, useLayoutCache });
      return { done: false, value };
    }
  });
}

function validateRect({ rect = {} }) {
  if (rect) {
    for (let key in rect) {
      const value = rect[key];
      if (value.length !== 2) throw new Error(`[xdim] uh oh. invalid hyper-rectangle`);
      const [start, end] = value;
      if (start > end) throw new Error(`[xdim] uh oh. invalid range for "${key}".  Start of ${start} can't be greater than end of ${end}.`);
    }
  }
}

function clip({ useLayoutCache = true, data, layout, rect, sizes = {}, flat = false, validate = true }) {
  if (validate) validateRect({ rect });

  if (typeof layout === "string") layout = parse(layout, { useLayoutCache });

  let datas = [data];

  layout.dims.forEach(arr => {
    let new_datas = [];
    datas.forEach(data => {
      if (arr.type === "Vector") {
        const [start, end] = rect[arr.dim];
        new_datas = new_datas.concat(data.slice(start, end + 1));
      } else {
        // only 2 types so must be arr.type === "Matrix"
        const { parts } = arr;
        let offsets = [0];
        let multiplier = 1;
        for (let i = parts.length - 1; i >= 0; i--) {
          const part = parts[i];
          // assume part.type === "Vector"
          const { dim } = part;
          const [start, end] = rect[dim];
          const new_offsets = [];
          for (let n = start; n <= end; n++) {
            offsets.forEach(offset => {
              new_offsets.push(offset + multiplier * n);
            });
          }
          offsets = new_offsets;
          multiplier *= sizes[dim];
        }
        offsets.forEach(offset => {
          new_datas.push(data[offset]);
        });
      }
    });
    datas = new_datas;
  });

  if (flat) {
    return {
      data: datas
    };
  }

  // prepareResult
  const out_sizes = Object.fromEntries(Object.entries(rect).map(([dim, [start, end]]) => [dim, end - start + 1]));

  const { data: out_data } = prepareData({
    layout,
    sizes: out_sizes
  });

  const max_depth = layout.dims.length;

  const step = (arr, depth) => {
    if (depth === max_depth) {
      for (let i = 0; i < arr.length; i++) {
        arr[i] = datas.shift();
      }
    } else {
      arr.forEach(sub => step(sub, depth + 1));
    }
  };
  step(out_data, 1);

  return { data: out_data };
}

function getMultipliers({ useLayoutCache = true, layout, sizes }) {
  if (typeof layout === "string") {
    layout = parse(layout, { useLayoutCache });
  }
  const { dims } = layout;
  const numDims = dims.length;
  let multipliers = {};
  for (let idim = 0; idim < numDims; idim++) {
    const arr = dims[idim];
    if (arr.type === "Vector") {
      multipliers[arr.dim] = 1;
    } else {
      // arr.type assumed to be "Matrix"
      const { parts } = arr;
      let multiplier = 1;
      for (let i = parts.length - 1; i >= 0; i--) {
        const { dim } = parts[i];
        multipliers[dim] = multiplier;
        multiplier *= sizes[parts[i].dim];
      }
    }
  }
  return multipliers;
}

function prepareSelect({ useLayoutCache = true, data, layout, sizes = {} }) {
  if (typeof layout === "string") {
    layout = parse(layout, { useLayoutCache });
  }
  const { dims } = layout;
  const numDims = dims.length;
  const multipliers = getMultipliers({ useLayoutCache, layout, sizes });
  const end = numDims - 1;

  const key = layout.summary.toString();
  if (key in preparedSelectFunctions) {
    const _this = { data };
    layout.dims.map((it, depth) => {
      if (it.type === "Vector") {
        _this[`d${depth}v0`] = it.dim;
      } else if (it.type === "Matrix") {
        it.parts.forEach((part, ipart) => {
          _this[`d${depth}v${ipart}`] = part.dim;
          _this[`m${depth}v${ipart}`] = multipliers[part.dim];
        });
      }
    });

    return preparedSelectFunctions[key].bind(_this);
  }

  return ({ point }) => {
    let currentData = data;
    for (let idim = 0; idim < numDims; idim++) {
      const last = idim === end;
      const arr = dims[idim];
      let offset;
      if (arr.type === "Vector") {
        offset = point[arr.dim];
      } else {
        // arr.type assumed to be "Matrix"
        offset = arr.parts.reduce((acc, { dim }) => acc + multipliers[dim] * point[dim], 0);
      }
      if (last) {
        return {
          index: offset,
          parent: currentData,
          value: currentData[offset]
        };
      } else {
        currentData = currentData[offset];
      }
    }
  };
}

function select({ useLayoutCache = true, data, layout, point, sizes = {} }) {
  // converts layout expression to a layout object
  if (typeof layout === "string") {
    layout = parse(layout, { useLayoutCache });
  }

  let parent;
  let index;
  let value = data;
  // dims are arrays
  const { dims } = layout;
  const len = dims.length;
  for (let idim = 0; idim < len; idim++) {
    const arr = dims[idim];
    if (arr.type === "Vector") {
      const i = point[arr.dim];
      parent = value;
      index = i;
      value = value[i];
    } else {
      // only 2 types so must be a Matrix
      const { parts } = arr;
      let offset = 0;
      let multiplier = 1;
      for (let i = parts.length - 1; i >= 0; i--) {
        const part = parts[i];
        if (part.type === "Vector") {
          const { dim } = part;
          offset += multiplier * point[dim];
          if (i > 0) {
            if (!(dim in sizes)) throw new Error(`you cannot calculate the location without knowing the size of the "${dim}" dimension.`);
            multiplier *= sizes[dim];
          }
        }
      }
      parent = value;
      index = offset;
      value = value[offset];
    }
  }

  return { index, value, parent };
}

// add dimension to an array until the limit reaches zero
function addDims({ arr, fill = undefined, lens }) {
  // no new dimensions to add
  if (lens.length === 0) return arr;

  const len = lens[0];
  if (lens.length === 0) {
    for (let i = 0; i < arr.length; i++) {
      arr[i] = new Array(len).fill(fill);
    }
  } else {
    for (let i = 0; i < arr.length; i++) {
      const sub = new Array(len).fill(fill);
      arr[i] = sub;
      addDims({ arr: sub, lens: lens.slice(1) });
    }
  }
  return arr;
}

function createMatrix({ fill = undefined, shape }) {
  const len = shape[0];
  const arr = new Array(len).fill(fill);
  return addDims({ arr, fill, lens: shape.slice(1) });
}

// generates an in-memory data structure to hold the data
function prepareData({ fill = undefined, layout, useLayoutCache = true, sizes }) {
  if (typeof layout === "string") layout = parse(layout, { useLayoutCache });

  // console.log("layout:", layout);
  const shape = layout.dims.map(it => {
    if (it.type === "Vector") {
      return sizes[it.dim];
    } else if (it.type === "Matrix") {
      return it.parts.reduce((total, part) => total * sizes[part.dim], 1);
    }
  });

  const data = createMatrix({ fill, shape });

  return { data, shape };
}

// assume positive step
function iterRange({ start = 0, end = 100 }) {
  let i = start - 1;
  end = end + 1;
  return wrapNextFunction(function next() {
    i++;
    if (i === end) {
      return { done: true };
    } else {
      return { done: false, value: i };
    }
  });
}

// iterate over all the points, saving memory vs array
function iterPoints({ order, sizes, rect = {} }) {
  // names sorted by shortest dimension to longest dimension
  const names = Array.isArray(order) ? order : Object.keys(sizes).sort((a, b) => sizes[a] - sizes[b]);

  const iters = new Array(names.length);
  const current = {};
  for (let i = 0; i < names.length - 1; i++) {
    const name = names[i];
    const [start, end] = rect[name] || [0, sizes[name] - 1];
    iters[i] = iterRange({ start: start + 1, end });
    current[name] = start;
  }
  const lastName = names[names.length - 1];
  const [start, end] = rect[lastName] || [0, sizes[lastName] - 1];
  iters[iters.length - 1] = iterRange({ start: start, end });
  current[lastName] = start - 1;

  // permutate
  return wrapNextFunction(function next() {
    for (let i = iters.length - 1; i >= 0; i--) {
      const { value, done } = iters[i].next();

      if (done) {
        if (i === 0) {
          // we have exhausted all of the permutations
          return { done: true };
        }
      } else {
        // add iters for the remaining dims
        for (let ii = i + 1; ii < iters.length; ii++) {
          const nameii = names[ii];
          const [start, end] = rect[nameii] || [0, sizes[nameii] - 1];
          iters[ii] = iterRange({ start: start + 1, end });
          current[nameii] = start;
        }

        current[names[i]] = value;

        return { value: current, done: false };
      }
    }
  });
}

function transform({ data, fill = undefined, from, to, sizes, useLayoutCache = true }) {
  if (typeof from === "string") from = parse(from, { useLayoutCache });
  if (typeof to === "string") to = parse(to, { useLayoutCache });

  const { data: out_data } = prepareData({ fill, layout: to, sizes });

  const update = prepareUpdate({
    useLayoutCache,
    data: out_data,
    layout: to,
    sizes
  });

  const points = iterPoints({ sizes });

  for (point of points) {
    const { value } = select({
      data,
      layout: from,
      point,
      sizes
    });

    // insert into new frame
    update({
      point,
      value
    });
  }

  return { data: out_data };
}

module.exports = {
  checkValidity,
  createMatrix,
  iterClip,
  iterRange,
  iterPoints,
  matchSequences,
  parse,
  parseDimensions,
  parseSequences,
  parseVectors,
  prepareData,
  prepareSelect,
  prepareUpdate,
  removeBraces,
  removeParentheses,
  select,
  transform,
  update,
  clip,
  validateRect
};

},{"./prepared-select-funcs.js":5,"./prepared-update-funcs.js":6,"iter-fun":3}],8:[function(require,module,exports){
const toImageData = require("to-image-data");

function imageDataToCanvas(imageData) {
  const canvas = document.createElement("CANVAS");
  canvas.height = imageData.height;
  canvas.width = imageData.width;
  const context = canvas.getContext("2d");
  context.putImageData(imageData, 0, 0);
  return canvas;
}

async function toCanvas(data) {
  const imageData = toImageData(data);
  return imageDataToCanvas(imageData);
};

if (typeof module === "object") module.exports = toCanvas;
if (typeof define === "function" && define.amd) define(function () { return toCanvas; });
if (typeof window === "object") window.toCanvas = toCanvas;
if (typeof self === "object") self.toCanvas = toCanvas;


},{"to-image-data":4}]},{},[8]);
